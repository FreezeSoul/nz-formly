/**
 * 处理属性为模板类型, 根据模板名称处理成模板对象
 * @param value 数据对象
 * @param fieldTemplates 模板容器
 * @param propName 属性名
 * @param propTemplateName 模板属性名称
 */
export function resolveTplName(value, fieldTemplates, propName, propTemplateName) {
    if (value[propName]) {
        return value[propName];
    }
    if (!fieldTemplates) {
        return undefined;
    }
    const tplName = propTemplateName || getTplName(propName);
    return fieldTemplates.get(value[tplName]);
}
/**
 * 处理属性为模板类型, 根据模板名称处理成模板对象列表
 * @param value 数据对象
 * @param fieldTemplates 模板容器
 * @param propName 属性名
 * @param propTemplateName 模板属性名称
 */
export function resolveTplNameArray(value, fieldTemplates, propName, propTemplateName) {
    if (value[propName] != null) {
        return value[propName];
    }
    if (!fieldTemplates) {
        return [];
    }
    const tplName = propTemplateName || getTplName(propName);
    const tplValue = value[tplName];
    if (Array.isArray(tplValue)) {
        return tplValue.map(key => fieldTemplates.get(key)).filter(tpl => tpl);
    }
    return [];
}
/**
 * 根据属性名获取模板名称
 * @param propName 属性名
 */
export function getTplName(propName) {
    return `${propName}Name`;
}
/**
 * 获取模板名称
 * @param value
 * @param propName
 * @param propTemplateName 模板属性名称
 */
export function hasTplNameValue(value, propName, propTemplateName) {
    const tplName = propTemplateName || getTplName(propName);
    return value[propName] || value[tplName];
}
/**
 * 获取根节点的FieldConfig
 * @param field 当前节点配置
 */
export function getRootFiled(field) {
    let p = field.parent;
    while (p && p.parent) {
        p = p.parent;
    }
    return p || field;
}
/**
 * 根据key获取指定FieldConfig
 * @param field 当前节点配置
 * @param key 配置的key
 */
export function findField(field, key) {
    const rootField = getRootFiled(field);
    return rootField.get(key);
}
//# sourceMappingURL=data:application/json;base64,